@startuml
state reset : clr control[32], xResult, yResult, zResult, interrupt \n set control.ready, .zOvReportEn, .iterationCount, .zOvStEn, .ovStEn, .rsltIntEn, .errIntEn, controlWrEn \n 

state idle {
    state idleLoop : clr controlWrEn, interrupt

    state start : set x, y, z Result as x, y, z inputs \n set control as controlInput\n clr control.flags[16], control.stop, control.start\n set controlWrEn

    idleLoop --> idleLoop : control.start
    idleLoop --> start : not control.start
    
    state idleReset <<join>>

    idleLoop --> idleReset : rst
    start --> idleReset : rst

    idleReset --> reset
}


state preCordic {

    state setup : clr controlWrEn
    state toCordic <<join>>
    state preCordicRst <<join>>

    
    state hyperbolicPreSet : set control.iterationElapsed as 1
    state hyperbolicInputError : set control.inputError

    hyperbolicPreSet --> hyperbolicInputError : X < 0 OR X < |Y|
    hyperbolicPreSet --> toCordic : No error

    setup --> hyperbolicPreSet : not control.rotationSystem

    state circularPreSet : set control.iterationElapsed as 0
    state circularError : set X as -X , Y as -Y, Z as Z - 180
    
    setup --> circularPreSet : control.rotationSystem

    circularPreSet --> circularError : (control.rotationMode and |Z| > 90) OR (not control.rotationMode and X < 0)
    circularPreSet --> toCordic : No Error
    circularError --> toCordic

    toCordic --> preCordicRst : rst
    hyperbolicInputError --> preCordicRst : rst

    preCordicRst --> reset
}

state Cordic {
    
    state iterator : inc control.iterationElapsed
    state incOverflow : inc control.ovIteration

    iterator --> incOverflow : not control.ovError

    state cordicComputation : set cordic Inputs and Outputs ( X Y Z, Overflow)\n set control.ovError as X_ov or Y_ov or (Z_ov and Z_ov_report_en)

    iterator --> cordicComputation : control.ovError
    incOverflow --> cordicComputation

    state cordicError <<join>>

    cordicComputation --> cordicError : control.stop or control.ov_st_en and ( X_ov or Y_ov or (Z_ov and Z_ov_st_en)) or control.iterationElapsed == control.iterationCount

    cordicComputation --> iterator : else

    cordicComputation --> reset : rst
}

state postCordic {
    state cleanup : set controlWrEn, control.ready
    state interrupt : set interrupt

    state toIdle <<join>>

    cleanup --> interrupt : ((overflow & ov_st_en) or inp_err) and err_interrupt_en or rslt_interrupt_en
    cleanup --> toIdle : else

    interrupt --> toIdle

    toIdle --> reset : rst

}


reset --> idleLoop
start --> setup
toCordic --> iterator
cordicError --> cleanup
hyperbolicInputError --> cleanup
toIdle --> idleLoop
@enduml